a) Write a shell script to print the following Pascalâ€™s triangle using function.
	1
       1 1
      1 2 1
     1 3 3 1

triangle(){
  rows=$1
  coef=1
  for((i=0;i<rows;i++))
  do
    for((space=1;space<=rows-i; space++))
    do
      echo -n "  "
    done
    for((j=0;j<=i;j++))
    do
      if [ $j -eq 0 -o $i -eq 0 ]
      then
          coef=1;
      else
          coef=$((coef*(i-j+1)/j))
      fi
      echo -n $coef "   "
    done
    echo
  done

}


echo "Enter number of rows : "
read rows
triangle $rows


b) Write a shell script to print the following pattern using tput cup CIRCLE

clear
echo "Enter the radius"
read r
tput clear

for((i=1;i<=360;i+=2))
do
	a=`echo "scale=3;3.14/180*$i"|bc|awk '{print cos($1)}'`
	x=`echo "scale=3;$r*$a"|bc|awk '{print int($1)}'`
	b=`echo "scale=3;3.14/180*$i"|bc|awk '{print sin($1)}'`
	y=`echo "scale=3;$r*$b"|bc|awk '{print int($1)}'`

	q=`expr $x + 35`
	p=`expr 10 - $y`
	tput cup $p $q
	echo "*"
done

tput cup $(tput lines) 0


c) Write a shell script to print the following patterns using tput cup

[TRIANGLE]

cols=`tput cols`
start=$((cols/2))
echo "How many rows do you want"
read rows
echo "What character do you want to use"
read char

tput clear
for((i=0;i<rows;i++))
do 
cols=$((start-i))
tput cup $i $cols

for((j=0;j<=i;j++))
do

if [ $i -eq $((rows-1)) ]
then
printf "$char "

elif [ $j -eq 0 ]
then
	printf "$char "
else

	if [ $j -eq $i ]
	then
		printf "$char "
	else
	printf "  "
	fi 

fi

done
done
echo""

[SQUARE]

echo "enter the sizeof the square"
read size
clear
for (( i = 1; i <= size; i++ )); do
    for (( j = 1; j <= size; j++ )); do

        if [ "$i" == 1 ] || [ "$i" == "$size" ] || [ "$j" == 1 ] || [ "$j" == "$size" ]
         then
#Set the Cursor Position using tput cup

#You can move the cursor to a specific row and column using tput cup. Following example positions the cursor at row i and column j.
            tput cup $i $j
            echo "* "
        fi
     done
done